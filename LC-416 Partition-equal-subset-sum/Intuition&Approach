Problem: LC-416 Partition Equal Subset Sum
Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets 
such that the sum of elements in both subsets is equal.

Example 1:
Input: [1, 5, 11, 5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].

Example 2:
Input: [1, 2, 3, 5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.


Approach:-

** 1. Type of Problem: **
   As by reading the statement, it seems little tough to recognise any pattern but Subset Sum problem is basic Dynamic
   programming problem and we can think in that way. Now As We can choose any elements from array given and add them to either Subset 1 or
   Subset 2. So Basically we have choices, and whenever we have choices, we can think of Dynamic Programming.
   
** 2. Understanding Problem **
   Now One thing that comes to mind is we have options. Suppose we have two subset sums S1 and S2 and there total sum will be S1+S2=totalSum 
   of the Array. Now The problem statement says that we need to check whether S1 can be equal to S2

** 3. Approach **
    S1= Sum of first Subset
    S2= Sum of second Subset
    totalSum = Sum of all elements of given array;
    To check: Whether S1==S2 is possible:
    
    a) One thing that comes to mind is if S1==S2, then totalSum will be 2*S1 and 2 * (Any Integer Value) means that it will be even.
       So first we can check that if totalSum is odd, we cannot divide into two subsets of equal sum because suppose total sum is 23,
       23 can never be divided into two equal integer values. It can be either 11+12 or 12+11.
    
    b) Now We know that S1 and S2 will be same, and S1 should be totalSum/2, then only we can say that it is possible. Example 
    if totalSum is 22, then S1 will be 11 and S2 will be 11. So if there is any subset with sum equal to 11, then its possible.
    
    c) Now you can realise, how this problem is reduced to basic problem of finding whether there is subset possible for given sum.
       So Subset Sum is parent problem of this question. 

** 4. Code **
    


            class Solution {
                public boolean canPartition(int[] nums) {

                    //First We calculate total sum and check whether it is even or odd;
                    //If sum is odd, we know we cannot divide it into 2 equal subsets;

                    int totalSum=0;
                    for(int i=0;i<nums.length;i++)
                    {
                        totalSum=totalSum+nums[i];
                    }

                    //Now if sum is odd, it cannot be broken down into two equal sums:
                    //For Ex: total sum is 23, it can either be 11+12 or 12+11, it can never be equal;

                    //if sum is even, then only it can be broken down two two equal subsets;

                    if(totalSum%2!=0)
                    {
                        return false;
                    }
                    
                    //Now suppose sum is 22; to broke it into even sums, we need sum of 11 and 11;
                    //Now if there is subset of sum 11 in array, obviously the left subset sum will also be 11 coz total is 11+11=22;

                    //Now we just need to check if there is sum of totalsum/2; in array;


                    int sum=totalSum/2;

                    //Now we will apply dp for subset problem;

                    boolean dp[][]=new boolean[nums.length+1][sum+1];

                    //Intialization;
                    for(int i=0;i<=nums.length;i++)
                    {
                       for(int j=0;j<=sum;j++)
                       {
                           //now if there is no array, can we make subset of any sum other than 0;
                           if(i==0)
                           {
                               //means there is no array;
                               dp[i][j]=false;
                           }

                           if(j==0)
                           {
                               //if subset to be generated is of 0 sum, its always possible;
                               dp[i][j]=true; //this will also cover when i and j both are 0;
                           }
                       }
                    }

                    for(int i=1;i<=nums.length;i++)
                    {
                        for(int j=1;j<=sum;j++)
                        {
                            if(nums[i-1]<=j)
                            {
                                //either we include that number or not;
                                dp[i][j] = dp[i-1][j-nums[i-1]] || dp[i-1][j];
                            }
                            else
                            {
                                //we have no choice, we cannot include it;
                                dp[i][j] = dp[i-1][j];
                            }
                        }
                    }
                    return dp[nums.length][sum];


                }
            }
       
     
** 5. Complexity **

   Time Complexity: Here we can using 2d array and N=Array Length and M=totalSum/2. So TC= O(N*M)
   Space Complexity: As we are using 2d Dp Array, so Space will be O(N*M). This can be reduced if we use 1d array.
  
