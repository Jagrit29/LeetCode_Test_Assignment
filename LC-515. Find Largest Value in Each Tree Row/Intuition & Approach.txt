
Problem Statement: 515. Find Largest Value in Each Tree Row
You need to find the largest value in each row of a binary tree.
Input: 

          1
         / \
        3   2
       / \   \  
      5   3   9 

Output: [1, 3, 9]

Approach:

1. Type of Problem: As we can easily understand that it is a tree problem and we are given root of the tree.

2. Understanding Problem Statement: 
   Questions says that we need to find the largest value in each row. Now to confuse a little bit, they mentioned row, 
   But here each row means level of the binary tree. Now in the given example, there are 3 levels or 3 rows, 
   so we will have 3 maximum values from each row respectively. To make this easier we will call each row as level only.

3. Approach: 
   a.) Now we need maximum value from each level, for example at level zero, we have only 1 node which is root, 
       so that is our maximum value. Now a approach which comes to mind is that we need to check all node values at PARTICULAR LEVEL 
       and while checking all values we can find Max easily by comparision.  
   b.) So if we do Level Order Traversal of our Tree, then we will be able to traverse each level and find the maximum. 
       Level Order Traversal of Binary tree uses the concept of Breadth First Search and we will be using Queue to implement the                solution.

4. Code:
          /**
           * Definition for a binary tree node.
           * public class TreeNode {
           *     int val;
           *     TreeNode left;
           *     TreeNode right;
           *     TreeNode(int x) { val = x; }
           * }
           */
          class Solution {
              public List<Integer> largestValues(TreeNode root) {

                  List<Integer> list=new ArrayList<>();   //This will be our list of all maximum values
                  
                  if(root==null)  //If root is initially null, we will return empty list.
                  {
                      return list;       
                  }
                  
                  //This is general Level Order Traversal with some additions as per the problem.

                  Queue<TreeNode> queue=new LinkedList<>();             //Creating Queue
                  queue.add(root);                                      //Adding root to our Queue:
                  
                  while(!queue.isEmpty())                            
                  {
                      int max=Integer.MIN_VALUE;                        //Intialising max to Global Minimum.
                      int levelSize=queue.size();                       //Here Level Size means the no. of nodes in our current level;
                      for(int i=0;i<levelSize;i++)
                      {
                          TreeNode currentNode=queue.poll();
                          max=Math.max(currentNode.val,max);                   //Comparing the value of currentNode to max value.
                         
                         if(currentNode.left!=null)
                          {
                              queue.add(currentNode.left);
                          }
                          
                          if(currentNode.right!=null)
                          {
                              queue.add(currentNode.right);
                          }
                      }
                      list.add(max);                                      //Adding Maximum of this level to our list;
                  }
                  return list;

              }
          }
   5. Time Complexity: As we are traversing each Node of tree Once, so Time Complexity is O(N), where N is the number of nodes in the tree.
      Space Complexity: We are using Queue to represent the nodes in present and next level, so Space complexity will be O(N). Also we are using List to print the output but it is not usually counted as extra space.
       
          
          
